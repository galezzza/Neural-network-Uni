import math
import random
import numpy as np

c = 0.1
e = 0.0001
beta = 1.0

w_old = np.array([
    [0.0, 1.0, 2.0],
    [0.0, 1.0, 2.0],
])

s_old = np.array([0.0, 1.0, 2.0])

u = np.array([[0.0, 0.0, 1.0],
              [1.0, 0.0, 1.0],
              [0.0, 1.0, 1.0],
              [1.0, 1.0, 1.0]])

z = np.array([0.0, 1.0, 1.0, 0.0,])


def f(x):
    return 1/1+math.exp(-1 * beta * x)


def x(i, p):
    if 0 <= i <= 1:
        j_sum = 0
        for j in range(3):
            j_sum += w_old[i][j] * u[p][j]
        return j_sum
    else:
        return 1.0


def y(p):
    i_sum = 0
    for i in range(3):
        i_sum += s_old[i] * x(i, p)
    return f(i_sum)


def Df(x):
    return beta * f(x) * (1 - f(x))


def DEp_s(i, p):
    if 0 <= i <= 2:
        k_sum = 0
        for k in range(3):
            k_sum += s_old[k] * x(k, p)
        return (y(p) - z[p]) * Df(k_sum) * x(i, p)
    else:
        to_delete = 0/0


def DEp_w(i, j, p):
    if (0 <= i <= 1) and (0 <= j <= 2):
        k_sum = 0
        for k in range(3):
            k_sum += s_old[k] * x(k, p)

        l_sum = 0
        for l in range(3):
            l_sum += w_old[i][l] * u[p][l]

        return (y(p) - z[p]) * Df(k_sum) * s_old[i] * Df(l_sum) * u[p][j]
    else:
        to_delete = 0 / 0


#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #

p = random.randint(0, 3)
s_new = s_old.copy()
w_new = w_old.copy()

for i in range(3):
    s_new[i] = s_old[i] - c * DEp_s(i, p)

for i in range(2):
    for j in range(3):
        w_new[i][j] = w_old[i][j] - c * DEp_w(i, j, p)

#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #

delta_s = max([abs(s_new[i] - s_old[i]) for i in range(3)])
delta_w = max([abs(w_new[i][j] - w_old[i][j]) for i in range(2) for j in range(3)])

condition = max(delta_s, delta_w) > e

a = 0
while condition:
    a += 1
    p = random.randint(0, 3)
    for i in range(3):
        s_old[i] = s_new[i]

    for i in range(2):
        for j in range(3):
            w_old[i][j] = w_new[i][j]

    for i in range(3):
        s_new[i] = s_old[i] - c * DEp_s(i, p)

    for i in range(2):
        for j in range(3):
            w_old[i][j] = w_new[i][j] - c * DEp_w(i, j, p)

    print()
    for i in range(4):
        print(y(i))

print(w_new)
print()
print(s_new)
print()
print(a)
print()
for i in range(4):
    print(y(i))

# 0, 1, 1, 0